var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Injectable } from '@angular/core';
var SQLitePorter = /** @class */ (function (_super) {
    __extends(SQLitePorter, _super);
    function SQLitePorter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SQLitePorter.prototype.importSqlToDb = function (db, sql) { return cordova(this, "importSqlToDb", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorter.prototype.exportDbToSql = function (db) { return cordova(this, "exportDbToSql", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorter.prototype.importJsonToDb = function (db, json) { return cordova(this, "importJsonToDb", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorter.prototype.exportDbToJson = function (db) { return cordova(this, "exportDbToJson", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorter.prototype.wipeDb = function (db) { return cordova(this, "wipeDb", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorter.pluginName = "SQLitePorter";
    SQLitePorter.plugin = "uk.co.workingedge.cordova.plugin.sqliteporter";
    SQLitePorter.pluginRef = "cordova.plugins.sqlitePorter";
    SQLitePorter.repo = "https://github.com/dpa99c/cordova-sqlite-porter";
    SQLitePorter.platforms = ["Amazon Fire OS", "Android", "BlackBerry 10", "Browser", "iOS", "Tizen", "Windows", "Windows Phone"];
    SQLitePorter = __decorate([
        Injectable()
    ], SQLitePorter);
    return SQLitePorter;
}(IonicNativePlugin));
export { SQLitePorter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NxbGl0ZS1wb3J0ZXIvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0lBK0NULGdDQUFpQjs7OztJQWFqRCxvQ0FBYSxhQUFDLEVBQU8sRUFBRSxHQUFXO0lBY2xDLG9DQUFhLGFBQUMsRUFBTztJQWVyQixxQ0FBYyxhQUFDLEVBQU8sRUFBRSxJQUFTO0lBY2pDLHFDQUFjLGFBQUMsRUFBTztJQWN0Qiw2QkFBTSxhQUFDLEVBQU87Ozs7OztJQXRFSCxZQUFZO1FBRHhCLFVBQVUsRUFBRTtPQUNBLFlBQVk7dUJBaER6QjtFQWdEa0MsaUJBQWlCO1NBQXRDLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBAbmFtZSBTUUxpdGUgUG9ydGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgQ29yZG92YS9QaG9uZWdhcCBwbHVnaW4gY2FuIGJlIHVzZWQgdG8gaW1wb3J0L2V4cG9ydCB0by9mcm9tIGEgU1FMaXRlIGRhdGFiYXNlIHVzaW5nIGVpdGhlciBTUUwgb3IgSlNPTi5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFNRTGl0ZVBvcnRlciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvc3FsaXRlLXBvcnRlcic7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc3FsaXRlUG9ydGVyOiBTUUxpdGVQb3J0ZXIpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIGxldCBkYiA9IHdpbmRvdy5vcGVuRGF0YWJhc2UoJ1Rlc3QnLCAnMS4wJywgJ1Rlc3REQicsIDEgKiAxMDI0KTtcbiAqIC8vIG9yIHdlIGNhbiB1c2UgU1FMaXRlIHBsdWdpblxuICogLy8gd2Ugd2lsbCBhc3N1bWUgdGhhdCB3ZSBpbmplY3RlZCBTUUxpdGUgaW50byB0aGlzIGNvbXBvbmVudCBhcyBzcWxpdGVcbiAqIHRoaXMuc3FsaXRlLmNyZWF0ZSh7XG4gKiAgIG5hbWU6ICdkYXRhLmRiJyxcbiAqICAgbG9jYXRpb246ICdkZWZhdWx0J1xuICogfSlcbiAqICAgLnRoZW4oKGRiOiBhbnkpID0+IHtcbiAqICAgICBsZXQgZGJJbnN0YW5jZSA9IGRiLl9vYmplY3RJbnN0YW5jZTtcbiAqICAgICAvLyB3ZSBjYW4gcGFzcyBkYi5fb2JqZWN0SW5zdGFuY2UgYXMgdGhlIGRhdGFiYXNlIG9wdGlvbiBpbiBhbGwgU1FMaXRlUG9ydGVyIG1ldGhvZHNcbiAqICAgfSk7XG4gKlxuICpcbiAqIGxldCBzcWwgPSAnQ1JFQVRFIFRBQkxFIEFydGlzdCAoW0lkXSBQUklNQVJZIEtFWSwgW1RpdGxlXSk7JyArXG4gKiAgICAgICAgICAgICdJTlNFUlQgSU5UTyBBcnRpc3QoSWQsVGl0bGUpIFZBTFVFUyAoXCIxXCIsXCJGcmVkXCIpOyc7XG4gKlxuICogdGhpcy5zcWxpdGVQb3J0ZXIuaW1wb3J0U3FsVG9EYihkYiwgc3FsKVxuICogICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygnSW1wb3J0ZWQnKSlcbiAqICAgLmNhdGNoKGUgPT4gY29uc29sZS5lcnJvcihlKSk7XG4gKlxuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1NRTGl0ZVBvcnRlcicsXG4gIHBsdWdpbjogJ3VrLmNvLndvcmtpbmdlZGdlLmNvcmRvdmEucGx1Z2luLnNxbGl0ZXBvcnRlcicsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5zcWxpdGVQb3J0ZXInLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2RwYTk5Yy9jb3Jkb3ZhLXNxbGl0ZS1wb3J0ZXInLFxuICBwbGF0Zm9ybXM6IFsnQW1hem9uIEZpcmUgT1MnLCAnQW5kcm9pZCcsICdCbGFja0JlcnJ5IDEwJywgJ0Jyb3dzZXInLCAnaU9TJywgJ1RpemVuJywgJ1dpbmRvd3MnLCAnV2luZG93cyBQaG9uZSddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNRTGl0ZVBvcnRlciBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcblxuICAvKipcbiAgICogRXhlY3V0ZXMgYSBzZXQgb2YgU1FMIHN0YXRlbWVudHMgYWdhaW5zdCB0aGUgZGVmaW5lZCBkYXRhYmFzZS4gQ2FuIGJlIHVzZWQgdG8gaW1wb3J0IGRhdGEgZGVmaW5lZCBpbiB0aGUgU1FMIHN0YXRlbWVudHMgaW50byB0aGUgZGF0YWJhc2UsIGFuZCBtYXkgYWRkaXRpb25hbGx5IGluY2x1ZGUgY29tbWFuZHMgdG8gY3JlYXRlIHRoZSB0YWJsZSBzdHJ1Y3R1cmUuXG4gICAqIEBwYXJhbSBkYiB7T2JqZWN0fSBEYXRhYmFzZSBvYmplY3RcbiAgICogQHBhcmFtIHNxbCB7c3RyaW5nfSBTUUwgc3RhdGVtZW50cyB0byBleGVjdXRlIGFnYWluc3QgdGhlIGRhdGFiYXNlXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja1N0eWxlOiAnb2JqZWN0JyxcbiAgICBzdWNjZXNzTmFtZTogJ3N1Y2Nlc3NGbicsXG4gICAgZXJyb3JOYW1lOiAnZXJyb3JGbidcbiAgfSlcbiAgaW1wb3J0U3FsVG9EYihkYjogYW55LCBzcWw6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4cG9ydHMgYSBTUUxpdGUgREIgYXMgYSBzZXQgb2YgU1FMIHN0YXRlbWVudHMuXG4gICAqIEBwYXJhbSBkYiB7T2JqZWN0fSBEYXRhYmFzZSBvYmplY3RcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrU3R5bGU6ICdvYmplY3QnLFxuICAgIHN1Y2Nlc3NOYW1lOiAnc3VjY2Vzc0ZuJyxcbiAgICBlcnJvck5hbWU6ICdlcnJvckZuJ1xuICB9KVxuICBleHBvcnREYlRvU3FsKGRiOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0YWJsZSBzdHJ1Y3R1cmUgYW5kL29yIHJvdyBkYXRhIGNvbnRhaW5lZCB3aXRoaW4gYSBKU09OIHN0cnVjdHVyZSBpbnRvIFNRTCBzdGF0ZW1lbnRzIHRoYXQgY2FuIGJlIGV4ZWN1dGVkIGFnYWluc3QgYSBTUUxpdGUgZGF0YWJhc2UuIENhbiBiZSB1c2VkIHRvIGltcG9ydCBkYXRhIGludG8gdGhlIGRhdGFiYXNlIGFuZC9vciBjcmVhdGUgdGhlIHRhYmxlIHN0cnVjdHVyZS5cbiAgICogQHBhcmFtIGRiIHtPYmplY3R9IERhdGFiYXNlIG9iamVjdFxuICAgKiBAcGFyYW0ganNvbiB7T2JqZWN0fHN0cmluZ30gSlNPTiBzdHJ1Y3R1cmUgY29udGFpbmluZyByb3cgZGF0YSBhbmQvb3IgdGFibGUgc3RydWN0dXJlIGFzIGVpdGhlciBhIEpTT04gb2JqZWN0IG9yIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgY2FsbGJhY2tTdHlsZTogJ29iamVjdCcsXG4gICAgc3VjY2Vzc05hbWU6ICdzdWNjZXNzRm4nLFxuICAgIGVycm9yTmFtZTogJ2Vycm9yRm4nXG4gIH0pXG4gIGltcG9ydEpzb25Ub0RiKGRiOiBhbnksIGpzb246IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4cG9ydHMgYSBTUUxpdGUgREIgYXMgYSBKU09OIHN0cnVjdHVyZVxuICAgKiBAcGFyYW0gZGIge09iamVjdH0gRGF0YWJhc2Ugb2JqZWN0XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja1N0eWxlOiAnb2JqZWN0JyxcbiAgICBzdWNjZXNzTmFtZTogJ3N1Y2Nlc3NGbicsXG4gICAgZXJyb3JOYW1lOiAnZXJyb3JGbidcbiAgfSlcbiAgZXhwb3J0RGJUb0pzb24oZGI6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFdpcGVzIGFsbCBkYXRhIGZyb20gYSBkYXRhYmFzZSBieSBkcm9wcGluZyBhbGwgZXhpc3RpbmcgdGFibGVzXG4gICAqIEBwYXJhbSBkYiB7T2JqZWN0fSBEYXRhYmFzZSBvYmplY3RcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrU3R5bGU6ICdvYmplY3QnLFxuICAgIHN1Y2Nlc3NOYW1lOiAnc3VjY2Vzc0ZuJyxcbiAgICBlcnJvck5hbWU6ICdlcnJvckZuJ1xuICB9KVxuICB3aXBlRGIoZGI6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbn1cbiJdfQ==